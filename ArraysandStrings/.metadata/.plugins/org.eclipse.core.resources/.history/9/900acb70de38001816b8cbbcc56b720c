import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
/*
 * To determine if a string has all unique characters with and without using Data Structures.
 * Here, we assume that the input is an ASCII string (128 chars).
 */
public class IsUnique {
	
	/*
	 * To check if the string contains all unique characters using HashSet.
	 * Time: O( min(c, n) ) where n is the length of the string and c is max size of characters possible(128).
	 */
	public boolean AreUniqueCharsSet(String s)
	{
		if(s.length() > 128)	
			return false;
		
		Set<Character> uniqueChars = new HashSet<>();
		
		for(int i = 0; i < s.length(); i++)
		{
			if(uniqueChars.contains(s.charAt(i)))
				return false;
			
			uniqueChars.add(s.charAt(i));				
		}
		
		return true;
		
	}
	
	/*
	 * To check if the string contains all unique characters using HashSet.
	 * Time: O(n)
	 */
	public boolean AreUniqueCharsBitSet(String s)
	{
		if(s.length() > 128)
			return false;
		
		BitSet uniqueChars[] = new BitSet(128);		
		
		for(int i = 0; i < s.length(); i++)
		{
			if(uniqueChars[s.charAt(i)])
				return false;
			
			uniqueChars[s.charAt(i)] = true;
				
		}
		
		return true;
	}
	
	public boolean AreUniqueCharsBruteForce(String s)
	{
		
		if(s.length() > 128)
			return false;
		
		for(int i = 0; i < s.length(); i++)
			for(int j = 0; j < s.length(); j++)
				if(s.charAt(i) == s.charAt(j))
					return false;
		
		return true;
		
	}
	
	public boolean AreUniqueCharsNoDataStructures(String s)
	{
		
		if(s.length() > 128)
			return false;
		
		char[] sArray = s.toCharArray();		
		Arrays.sort(sArray);
		
		for(int i = 0; i < s.length(); i++)
			if(sArray[i] == sArray[i+1])
				return false;
		
		return true;
		
	}
	
	
	public static void main(String args[])
	{
		IsUnique unique = new IsUnique();
		System.out.println(unique.AreUniqueCharsBitSet(args[0]));
	}

}
