import java.util.Arrays;
import java.util.BitSet;
import java.util.HashSet;
import java.util.Set;

public class IsUnique {
	
	/*To checks if the string contains all unique characters using HashSet. 
	 * Time: O(c, n). where 
	 */
	public boolean AreUniqueCharsSet(String s)
	{
		if(s.length() > 128)
			return false;
		
		Set<Character> uniqueChars = new HashSet<>();
		
		for(int i = 0; i < s.length(); i++)
		{
			if(uniqueChars.contains(s.charAt(i)))
				return false;
			
			uniqueChars.add(s.charAt(i));
				
		}
		
		return true;
		
	}
	
	public boolean AreUniqueCharsBitSet(String s)
	{
		if(s.length() > 128)
			return false;
		
		boolean uniqueChars[] = new boolean[128];		
		
		for(int i = 0; i < s.length(); i++)
		{
			if(uniqueChars[s.charAt(i)])
				return false;
			
			uniqueChars[s.charAt(i)] = true;
				
		}
		
		return true;
	}
	
	public boolean AreUniqueCharsBruteForce(String s)
	{
		
		if(s.length() > 128)
			return false;
		
		for(int i = 0; i < s.length(); i++)
			for(int j = 0; j < s.length(); j++)
				if(s.charAt(i) == s.charAt(j))
					return false;
		
		return true;
		
	}
	
	public boolean AreUniqueCharsNoDataStructures(String s)
	{
		
		if(s.length() > 128)
			return false;
		
		char[] sArray = s.toCharArray();
		
		Arrays.sort(sArray);
		
		for(int i = 0; i < s.length(); i++)
		{
			
		}
		return true;
		
	}
	
	
	public static void main(String args[])
	{
		IsUnique unique = new IsUnique();
		System.out.println(unique.AreUniqueCharsBitSet(args[0]));
	}

}
