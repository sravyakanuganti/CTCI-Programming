import java.util.Arrays;
import java.util.BitSet;
import java.util.HashSet;
import java.util.Set;
/*
 * To determine if a string has all unique characters with and without using Data Structures.
 * Here, we assume that the input is an ASCII string (128 chars).
 */
public class IsUnique {
	
	/*
	 * To check if the string contains all unique characters using HashSet. 
	 * For each character in the string, check if it is present in the set (i.e., if that character already
	 * appeared in the string), 
	 * if yes, return false. Else, add the character to the set and continue. 
	 * Return true once all the characters are checked.
	 * 
	 * Time: O(n) since every char in the string is checked once.
	 * Space: O( min(c, n) ) where n is the length of the string and c is max size of characters 
	 * possible(128).
	 */
	public boolean AreUniqueCharsSet(String s)
	{
		if(s.length() > 128)	
			return false;
		
		Set<Character> uniqueChars = new HashSet<>();
		
		for(int i = 0; i < s.length(); i++)
		{
			if(uniqueChars.contains(s.charAt(i)))
				return false;
			
			uniqueChars.add(s.charAt(i));				
		}
		return true;
		
	}
	
	/*
	 * To check if the string contains all unique characters using BitSet. 
	 * Construct a array of bits using BitSet with size 128. For each character in the string, check if the 
	 * bit corresponding to it in the bit array is true (i.e., that character already appeared in the string)
	 * if yes, return false. Else, set the bit to true and continue.
	 * Return true once all the characters are checked.
	 * 
	 * Time: O(n) since every char in the string is checked once.
	 * Space: O(1) since we use 128 bits to store the chars.
	 */
	public boolean AreUniqueCharsBitSet(String s)
	{
		if(s.length() > 128)
			return false;
		
		BitSet uniqueChars = new BitSet(128);		
		
		for(int i = 0; i < s.length(); i++)
		{
			if(uniqueChars.get(s.charAt(i)))
				return false;
			
			uniqueChars.set(s.charAt(i));
		}
		return true;
		
	}
	
	/*
	 * To check if the string contains all unique characters by comparing every character in the string to
	 * all the characters that follow it till the end of the string.
	 * 
	 * Time: O(n^2)
	 * Space: O(1) since no additional space is required.
	 */
	public boolean AreUniqueCharsBruteForce(String s)
	{
		
		if(s.length() > 128)
			return false;
		
		for(int i = 0; i < s.length() - 1; i++)
			for(int j = i + 1; j < s.length(); j++)
				if(s.charAt(i) == s.charAt(j))
					return false;
		
		return true;
		
	}
	
	/*
	 * To check if the string contains all unique characters by sorting the characters in the input string
	 * and comparing the adjacent characters.
	 * 
	 * Time: O(n log n) to sort the input string.
	 * Space: O(n) to store the character array.
	 */
	public boolean AreUniqueCharsSorting(String s)
	{
		
		if(s.length() > 128)
			return false;
		
		char[] sArray = s.toCharArray();		
		Arrays.sort(sArray);
		
		for(int i = 0; i < s.length(); i++)
			if(sArray[i] == sArray[i+1])
				return false;
		
		return true;
		
	}
	
	
	public static void main(String args[])
	{
		IsUnique unique = new IsUnique();
		System.out.println(unique.AreUniqueCharsBitSet(args[0]));
	}

}
